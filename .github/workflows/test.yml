name: Test
on:
  workflow_dispatch:
  push:
    paths:
      - 'app/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'app/**'
      - 'tests/**'

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.12", "3.13" ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v4
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        run: poetry install --with test
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .venv
          # exit-zero treats all errors as warnings. 100 chars as exception for the 88 from black
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics --exclude .venv
      - name: Test with pytest
        run: |
          poetry run pytest ./tests
