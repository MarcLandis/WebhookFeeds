{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<p>Webhook Feeds is a simple RESTful API to create and get feeds.</p> <p>It is build on top of the wonderful FastAPI framework.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"add_feed/","title":"Add a feed","text":"<p>Currently, it is only possible to add feeds using the OpenAPI UI. This will be improved in the future.</p> <ol> <li>Open the OpenAPI UI by navigating to <code>/docs</code> in your browser.</li> <li>Click on the <code>POST /feeds</code> endpoint.</li> <li>Click on the <code>Try it out</code> button.</li> <li>Fill in the required fields.</li> <li>Click on the <code>Execute</code> button.</li> <li>The feed will be added, and you will receive a response with the feed data.</li> </ol> <p>In the response body, you will see the feed data, including the <code>id</code> of the feed. You will need this <code>id</code> to add feed items to the feed.</p> <p>If you want to get the <code>id</code> of a feed that you have already added, you can do so by navigating to the <code>GET /feeds</code> endpoint in the OpenAPI UI and click on the <code>Try it out</code> followed by the <code>Execute</code> button. You will see a list of all the feeds that you have added, including their <code>id</code>s.</p>"},{"location":"add_feeditems/","title":"Add feed items","text":"<p>Usually there should be no need to add feed items manually, as they are added through the proxy endpoint. However, if you want to add feed items manually, you can do so using the OpenAPI UI.</p> <ol> <li>Open the OpenAPI UI by navigating to <code>/docs</code> in your browser.</li> <li>Click on the <code>POST /feeds/{feed_id}/items</code> endpoint.</li> <li>Click on the <code>Try it out</code> button.</li> <li>Fill in the required fields. The <code>feed_id</code> is the <code>id</code> of the feed that you want to add the feed item to.</li> <li>Click on the <code>Execute</code> button.</li> <li>The feed item will be added, and you will receive a response with the feed item data.</li> </ol>"},{"location":"deploy/","title":"Deployment","text":"<p>Webhook Feeds is deployed using Docker. You can use the build in SQLite database engine or any engines that is supported by SQLAlchemy</p> <p>Currently, there is no security implemented, so it is recommended to run this behind a reverse proxy with SSL enabled and some sort of authentication provided by the reverse proxy.</p>"},{"location":"deploy/#example-docker-composeyml","title":"Example docker-compose.yml","text":"<p>SQLite</p> <pre><code>services:\n  webhookfeeds:\n    image: marclandis/webhookfeeds:latest\n    container_name: webhookfeeds\n    volumes:\n      - database:/usr/src/app/database # SQLite database location\n      - templates_custom:/usr/src/app/templates/custom # Custom templates location\n    ports:\n      - 8000:80\n    restart: unless-stopped\n\nvolumes:\n  database:\n  templates_custom:\n</code></pre> <p>PostgreSQL</p> <pre><code>services:\n  webhookfeeds:\n    image: marclandis/webhookfeeds:latest\n    container_name: webhookfeeds\n    environment:\n      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}\n    volumes:\n      - templates_custom:/usr/src/app/templates/custom # Custom templates location\n    ports:\n      - 8000:80\n    restart: unless-stopped\n\n  postgres:\n    image: postgres:17.2\n    hostname: postgres\n    container_name: postgres\n    restart: unless-stopped\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n\nvolumes:\n  postgres_data:\n  templates_custom:\n</code></pre> <p>.env file:</p> <pre><code>POSTGRES_DB=webhookfeeds\nPOSTGRES_USER=webhookfeeds\nPOSTGRES_PASSWORD=Password1234!\n</code></pre>"},{"location":"diun/","title":"Diun","text":"<p>To use the Diun proxy, you need to have a Diun instance running. Diun is a Docker image update notifier service written in Go. It can watch multiple Docker registries and send notifications to multiple messaging platforms, including Slack, Discord, Telegram, and more.</p>"},{"location":"diun/#configuration","title":"Configuration","text":"<p>Follow the instruction on the Diun website to set up a webhook in Diun. The endpoint URL needs to point to the <code>/feeds/{feed_id}/diun</code> endpoint of your Webhook Feeds instance.</p> <p>The <code>feed_id</code> is the <code>id</code> of the feed that you want to add the feed item to.</p>"},{"location":"feed_renderer/","title":"Get the news feed","text":"<p>To get the news feed for you favourite news aggregator, you can choose between an RSS or Atom feed. This URL can then be added to your news aggregator.</p>"},{"location":"feed_renderer/#rss","title":"RSS","text":"<p>Use the endpoint <code>/feeds/{id}/rssfeed</code> to get the RSS feed.</p>"},{"location":"feed_renderer/#atom","title":"Atom","text":"<p>Use the endpoint <code>/feeds/{id}/atomfeed</code> to get the Atom feed.</p>"},{"location":"license/","title":"The MIT License (MIT)","text":"<p>Copyright \u00a9 2025 MarcLandis</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"templates/","title":"Templates","text":"<p>Templates are used to generate the final output of the title and description of a feed item. They are written in the Jinja2 templating language.</p>"},{"location":"templates/#custom-templates","title":"Custom templates","text":"<p>Templates have the following naming convention:</p> <p><code>{proxy}.title.jinja2</code></p> <p><code>{proxy}.description.jinja2</code></p> <p>Where <code>{proxy}</code> is the name of the proxy that the template is for.</p>"},{"location":"templates/#custom-template-for-a-proxy","title":"Custom template for a proxy","text":"<p>To use your own templates for feed items, you can create a new file in the <code>templates/custom/</code> folder. This template will be used for all feed items for the specified proxy.</p>"},{"location":"templates/#example","title":"Example","text":"<p>For the <code>diun</code> proxy, you would create a file named <code>diun.title.jinja2</code> in the <code>templates/custom/</code> folder.</p>"},{"location":"templates/#custom-template-for-a-feed","title":"Custom template for a feed","text":"<p>If you want more fine-grained control over the templates, you can create a custom template for a specific feed by creating the template in a subfolder of <code>templates/custom/</code> named after the feed's <code>id</code>.</p>"},{"location":"templates/#example_1","title":"Example","text":"<p>For the <code>diun</code> proxy with the feed id <code>e3d19c27-4e68-4d51-bcae-63f5b971d8ab</code>, you would create a file named <code>diun.title.jinja2</code> in the <code>templates/custom/e3d19c27-4e68-4d51-bcae-63f5b971d8ab/</code> folder.</p>"},{"location":"what_is_proxy/","title":"What is a proxy","text":"<p>A proxy in Webhook Feeds is an API endpoint that receives webhooks from external services and transforms them into feed items.</p> <p>Currently supported proxies:</p> <ul> <li>Diun</li> </ul>"}]}